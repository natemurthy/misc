#!/bin/bash

PROJECT_DIR="$(cd "`dirname $0`"/..; pwd)"
cd $PROJECT_DIR

if hash docker 2>/dev/null; then
    docker --version
else
    echo "You need Docker installed to run these tests"
    exit 1
fi

fail_msg() {
    echo -e "Error: containers not properly setup"
    exit 1
}

has_orientdb_container=`docker images | grep myapp/orientdb`
has_rabbitmq_container=`docker images | grep myapp/rabbitmq`

if [[ $has_orientdb_container != *"orientdb"* || \
      $has_rabbitmq_container != *"rabbitmq"* ]]; then
    echo "Run ./dev/setup-containers to pull container images"
    fail_msg
fi

orientdb_name="myapp_orientdb"; rabbitmq_name="myapp_rabbitmq"
inspect_orientdb=`docker inspect -f {{.State.Running}} $orientdb_name 2>&1`
inspect_rabbitmq=`docker inspect -f {{.State.Running}} $rabbitmq_name 2>&1`

if [[ $inspect_orientdb != "true" || $inspect_rabbitmq != "true" ]]; then
   echo "[$orientdb_name] $inspect_orientdb"
   echo "[$rabbitmq_name] $inspect_rabbitmq"
   echo "Run ./dev/setup-containers to start containers"
   fail_msg
fi

case `uname` in
    "Linux")
        export CONTAINER_HOST="localhost"
        ;;
    "Darwin")
        if hash docker-machine 2>/dev/null; then
            if [[ `docker-machine status default` == "Running" ]]; then
                export CONTAINER_HOST=`docker-machine ip default`
            else
                echo "Default docker machine not running"
                fail_msg
            fi
        else
            echo "Your Mac needs docker-machine installed"
            fail_msg
        fi
        ;;
    *) echo "Unsupported OS"; fail_msg ;;
esac
